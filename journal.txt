Fri 26 Feb 2016 04:25:55 PM PST

why are we performing poorly??? I guess I need to visualize the tree

Fri 26 Feb 2016 11:45:59 AM PST

0.25 seems to be a good aggregation radius for 500 iterations

Fri 26 Feb 2016 11:32:21 AM PST

invalid gurobi license on 
solver = AgUCTSolver(
    aggregator = OPCSPAg(0.2),
    rollout_solver=FeedbackSolver(GurobiExactSolver()),
    exploration_constant=50.0,
    n_iterations=500,
    rng=srng
)

Fri 26 Feb 2016 10:19:47 AM PST

solver = AgUCTSolver(
    aggregator = OPCSPAg(0.1),
    rollout_solver=FeedbackSolver(HeuristicSolver()),
    exploration_constant=50.0,
    n_iterations=500,
    rng=srng
)
works ok

Wed 17 Feb 2016 04:53:10 PM PST

[ ] aggregate states for which the L1 norm is small

Wed 17 Feb 2016 01:13:11 PM PST

[ ] streamline testing
[ ] try some heuristics (stefan's)
[ ] look at histograms

Tue 16 Feb 2016 07:48:54 PM PST

Dang... Now what?
try different problem classes?
cluster close states?
let MCTS go?

Tue 16 Feb 2016 07:47:00 PM PST

        solver = DPWSolver(
            rollout_solver=SolveMeanFeedback(p, HeuristicSolver()),
            action_generator=PreSolvedActionGenerator(p,rng=srng),
            exploration_constant=sum(p.r),
            n_iterations=10000,
            rng=srng,
            k_action = 5.0,
            alpha_action = 0.2,
            k_state = 3.0,
            alpha_state = 0.2
        )
        177 seconds
naive_scores Out[8]: 1-element Array{Float64,1}: 63.6729
mcts_scores Out[9]: 1-element Array{Float64,1}: 59.7604
feedback_scores Out[10]: 1-element Array{Float64,1}: 64.3322

Tue 16 Feb 2016 05:51:31 PM PST

        solver = DPWSolver(
            rollout_solver=SolveMeanFeedback(p, GurobiExactSolver()),
            action_generator=PreSolvedActionGenerator(p,rng=srng),
            exploration_constant=sum(p.r),
            n_iterations=50,
            rng=srng,
            k_action = 5.0,
            alpha_action = 0.2,
            k_state = 3.0,
            alpha_state = 0.2
        )
128 seconds
naive_scores Out[4]: 1-element Array{Float64,1}: 63.6729
mcts_scores Out[5]: 1-element Array{Float64,1}: 63.059
feedback_scores Out[6]: 1-element Array{Float64,1}: 64.3322

Tue 16 Feb 2016 05:50:22 PM PST

        solver = DPWSolver(
            rollout_solver=SolveMeanFeedback(p, GurobiExactSolver()),
            action_generator=HeuristicActionGenerator(HeuristicSolver(),srng,actions(p)),
            exploration_constant=sum(p.r),
            n_iterations=50,
            rng=srng,
            k_action = 5.0,
            alpha_action = 0.2,
            k_state = 3.0,
            alpha_state = 0.2
        )
55 seconds
In [5]: naive_scores Out[5]: 1-element Array{Float64,1}: 63.6729
In [6]: mcts_scores Out[6]: 1-element Array{Float64,1}: 62.6014
In [7]: feedback_scores Out[7]: 1-element Array{Float64,1}: 64.3322 
woo

Tue 16 Feb 2016 05:43:48 PM PST

changed sim rng

Tue 16 Feb 2016 04:51:53 PM PST

[ ] make better action generator
[ ] take a break

Tue 16 Feb 2016 04:39:14 PM PST

50 gurobi
45.75 seconds
naive_scores Out[5]: 1-element Array{Float64,1}: 63.6729
mcts_scores Out[6]: 1-element Array{Float64,1}: 60.7881
feedback_scores Out[7]: 1-element Array{Float64,1}: 64.3322

10k heuristic
71 seconds?
naive_scores Out[15]: 1-element Array{Float64,1}: 63.6729
mcts_scores Out[16]: 1-element Array{Float64,1}: 61.6935
feedback_scores Out[17]: 1-element Array{Float64,1}: 64.3322

Fri 12 Feb 2016 12:47:08 PM PST

[X] improve visualization

Fri 12 Feb 2016 12:07:49 AM PST

mcts works - visualizing tree
[X] choose actions in a smart way

Thu 04 Feb 2016 05:36:28 PM PST

[ ] Read two stage approach to...
[ ] read about c-a heuristic in Tang & Miller-Hooks

Tue 02 Feb 2016 01:01:46 PM PST

[ ] test MCTS and make sure it works (it doesn't now)

Mon 01 Feb 2016 06:53:53 PM PST

[X] why choosing infeasible actions

Mon 01 Feb 2016 05:21:41 PM PST

Eventually:
[ ] Profile MCTS Code

Mon 01 Feb 2016 04:23:24 PM PST

[X] implement general way to convert to SimpleOP
[X] implement heuristic as policy
[ ] compare MCTS performance
[ ] commit MCTS stuff

Tue 19 Jan 2016 10:52:43 AM PST

How badly does it affect the simulations to use an open-loop value estimate rather than a feedback rollout?

[ ]

Mon 18 Jan 2016 08:39:30 PM PST

Tried hotstarting through JuMP. Seemed like performance was the same as giving it the answer
So, hotstarting does seem to help, but doesn't immediately give the answer

Next we need to test the Leifer model

Fri 15 Jan 2016 01:00:08 PM PST

[ ] implement and test Leifer MILP
[ ] value of information
[ ] implement Leifer upper bound LP

Mon 11 Jan 2016 09:56:55 PM PST

[ ] Offline MCTS
[ ] Offline genetic/ant-colony heuristic

Sat 09 Jan 2016 01:33:26 PM PST

[O] Implement single step heuristic
[ ] Implement Chao's heuristic inefficiently

Fri 01 Jan 2016 04:02:33 PM PST

[X] Solve this tomorrow (first use a HistoryRecorder with max steps to see what's going on)
the offending problem is gen_two_cluster_problem(noise=1.0, p=0.1, n_nodes=10, rng=MersenneTwister(32))

even with only 1 thread, memory fills up with N=100
with addprocs(3) still fills up memory

Fri 01 Jan 2016 02:14:09 PM PST

blocks don't seem to solve the memory problem :(

[/] Figure out this error: (this probably had to do with the findfirst thing)
    ERROR (unhandled task failure): On worker 6:
    BoundsError: attempt to access 6x6 Array{Float64,2}:
     0.0  1.0  -9.62191e-7  0.0  0.0  0.0
     0.0  0.0   9.63028e-7  1.0  0.0  0.0
     0.0  0.0   0.0         0.0  0.0  0.0
     0.0  0.0   0.0         0.0  1.0  0.0
     0.0  0.0   0.0         0.0  0.0  1.0
     0.0  0.0   0.0         0.0  0.0  0.0
      at index [0,Colon()]
     in throw_boundserror at abstractarray.jl:156
     in solve_op at /home/zach/.julia/OPCSPs/src/solutions.jl:52
     in action at /home/zach/.julia/OPCSPs/src/rollouts.jl:22
     in simulate at /home/zach/.julia/POMDPToolbox/src/simulators.jl:59
     in rollout at /home/zach/.julia/POMCP/src/solver.jl:139
     in simulate at /home/zach/.julia/POMCP/src/solver.jl:79
     in simulate at /home/zach/.julia/POMCP/src/solver.jl:120
     in search at /home/zach/.julia/POMCP/src/solver.jl:48
     in action at /home/zach/.julia/POMCP/src/solver.jl:16
     in simulate at /home/zach/.julia/POMDPToolbox/src/simulators.jl:59

Fri 01 Jan 2016 01:38:11 PM PST

[ ]WHY IS MCTS BEATING cheat on average sometimes ???

Fri 01 Jan 2016 10:30:05 AM PST

[ ] profile
N=10: 3354 MB
N=50: Too much
random
N=100: 4129
N=20: 4300

Thu 19 Nov 2015 10:57:54 AM PST

[X] test exact solvers
[X] adapt to pomdps
[ ] run tests that were in the paper
